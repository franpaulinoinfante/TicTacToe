@startuml Architecture Design
    !theme blueprint
    title Architecture Design

    package TicTacToe{
        package ConsoleApp{
            namespace Models #Green{}
            namespace Types #OrangeRed{}
            namespace Enums #SaddleBrown{}
            namespace ConsoleIOs #SeaGreen {
            }
            ConsoleIOs ..> IO

            Models ..> Enums
            Models ..> Types
            Models ..> ConsoleIOs

            Types ..> Enums
            Types..> ConsoleIOs

            Enums ..> ConsoleIOs

            
        }
    }
    TicTacToe ..> System

    package System{
    }
    
    package IO{
    }
    IO ..> System
@enduml

@startuml Use Case Design ConfigurePlayer
    !theme blueprint
    allow_mixing
    title Use Case Design - ConfigurePlayer
    
    actor "Player" as User
    
    package Models{
        object ":TicTacToe" as TicTacToe{
        }    
        object ":PlayerConfiguration" as PlayerConfiguration{
        }        
        object ":Player" as Player{
        }    
    }

    package Enums{
        object ":Message" as Message{
        }    
        object ":Error" as Error{
        }    
        object ":Token" as Token{
        }    
    }

    package ConsoleIOs{                
        object ":ConsoleIO" as ConsoleIO{
        }    
    }

    User --> TicTacToe : ConfigurePlayer()
        TicTacToe --> PlayerConfiguration : ConfigurePlayer()
            PlayerConfiguration --> Message : GetMessage()
            PlayerConfiguration --> ConsoleIO : ReadInt(Message)
            PlayerConfiguration --> Error : IsNull() \nWriteLine()
                Error --> ConsoleIO : WriteLine(ErrorMessage)
            PlayerConfiguration --> Token : GetTokens()
            PlayerConfiguration --> Player : Create(Token)

@enduml

@startuml Use Case Design Start
    !theme blueprint
    allow_mixing
    title Use Case Design - Start
    
    actor "Player" as User
    
    package Models{
        object ":TicTacToe" as TicTacToe{
        }
        object ":Board" as Board{
        }    
        object ":Player" as Player{
        }    
    }

    package Enums{
        object ":Message" as Message{
        }    
        object ":Token" as Token{
        }    
    }

    package Types{                
        object ":Coordinte" as Coordinte{
        }    
    }

    package ConsoleIOs{                
        object ":ConsoleIO" as ConsoleIO{
        }    
    }

    User --> TicTacToe : Start()
        TicTacToe --> Board : NewGame()
            Board --> Message
                note on link
                    HorizontalLine.WriteLine()
                    VerticalLine.Write()
                endnote
            Board --> Coordinte : GetCoordinate(i,j)
            Board --> Token : Write()
            Board --> ConsoleIO : WriteLine()
        TicTacToe --> Player : NewGame()
@enduml

@startuml Use Case Design Play
    !theme blueprint
    allow_mixing
    title Use Case Design - Play
    
    actor "Player" as User
    
    package Models{
        object ":TicTacToe" as TicTacToe{
        }
        object ":Board" as Board{
        }    
        object ":Turn" as Turn{
        }   
        object ":Player" as Player{
        }    
    }

    package Enums{
        object ":Message" as Message{
        }    
        object ":Token" as Token{
        }    
        object ":Error" as Error{
        }    
    }

    package Types{                
        object ":Coordinte" as Coordinte{
        }               
        object ":ClosedInterval" as ClosedInterval{
        }    
    }

    package ConsoleIOs{                
        object ":ConsoleIO" as ConsoleIO{
        }    
    }

    User --> TicTacToe : Play()
        TicTacToe --> Turn : GetCurrent()\nChange()
            Turn --> Player : GetPlayer()
        TicTacToe --> Message : WriteLine(player)
            Message --> ConsoleIO : WriteLine(player)
        TicTacToe --> Player 
            note on link
                HasToken()
                PutToken()
                MoveToken()
                WriteWinnerMessage()
            endnote
            Player --> Message : GetMessage(EnterCoordinate)\nGetMessage(EnterOriginCoordinateToMove)\nGetMessage(EnterTargetCoordinateToPut)
            Player --> Coordinte : Read(Message)
                Coordinte --> Message : GetRow()\nGetColunm()
                Coordinte --> ConsoleIO : ReadInt(row)\nReadInt(colunm)
                Coordinte --> ClosedInterval : IsValir(row)\nIsValir(colunm)
                Coordinte --> Error : IsNull(Error)\nWriteLine(ErrorMessage)
            Player --> Token : GetToken()
            Player --> Board 
                note on link
                    PutToken(target, token)
                    IsEmpty(target, token)
                    MoveToken(origin, target)
                    IsOccupied(Coordinate, Token)
                endnote
            Player --> Error : IsNull()\nError.WriteLine()
                Error --> ConsoleIO : WriteLine(Error)
        TicTacToe --> Board : IsWinner()
@enduml

@startuml Use Case Design Resume
    !theme blueprint
    allow_mixing
    title Use Case Design - Resume
    
    actor "Player" as User
    
    package Models{
        object ":TicTacToe" as TicTacToe{
        }
        object ":Turn" as Turn{
        }   
        object ":Player" as Player{
        }    
    }

    package Enums{
        object ":Message" as Message{
        }    
    }

    package ConsoleIOs{                
        object ":ConsoleIO" as ConsoleIO{
        }             
        object ":YesNotDialog" as YesNotDialog{
        }    
    }

    User --> TicTacToe : IsResume()
        TicTacToe --> Turn : GetCurrent()
            Turn --> Player : GetPlayer()
        TicTacToe --> Player : IsContinue()
            Player --> Message : GetMessage(Resume)
            Player --> YesNotDialog : Read(Message)\nIsAffirmative()
                YesNotDialog --> ConsoleIO : ReadChar(Message)

@enduml

@startuml Design Class Models
    !theme blueprint
    title Design Class - Models

    package TicTacToe{
        package ConsoleApp{  
            namespace Models{
                class TicTacToe{
                    ~TicTacToe()
                    ~Run()
                    -ConfigurePlayer(Board)
                    -Start()
                    -GetCurrentPlayer() : Token
                    -Play()
                    -IsResume() : boolean
                }
                TicTacToe *--> Board
                TicTacToe *--> Turn
                TicTacToe *--> "2" Player
                TicTacToe ..> PlayerConfiguration

                class Board{
                    ~Board()
                    ~Reset()
                    ~IsEmpty(Coordinate) : boolean
                    ~IsOccupied(Coordinate, Token) : boolean
                    -GetToken(Coordinate) : Token
                    ~PutToken(Coordinate, Token)
                    ~MoveToken(Origin, Target)
                    ~IsTicTacToe(Token) : boolean
                    -GetDirections(Token) : List<Direction>
                    -GetCoordinates(Token) : List<Coordinate>
                    ~Write()
                }

                class Turn{
                    -{static}MaxPlayers : int
                    -current : int
                    ~Turn()
                    ~Set(Players)
                    ~Next()
                    ~GetCurrent() : Player
                    ~WriteLine()
                }
                Turn --> "2" Player 

                abstract Player{
                    -{static}MaxTokens : int
                    -{static}Empty : int
                    -tokens : int
                    ~Player(Token, Board)
                    #GetToken() : Token
                    #Reset()
                    #HasToken() : boolean
                    #PutToken()
                    #{abstract}GetCoordinate(Message) : Coordinate
                    #CheckErrorToPuToken(Coordinate) : Error
                    #MoveToken()
                    #CheckOriginErrorToMoveToken(origin) : Error
                    #CheckTargetErrorToMoveToken(origin, target) : Error
                    #IsContinue() : boolean
                    #WriteWinner()
                }
                Player <|-- UserPlayer
                Player <|-- MachinePlayer
                Player --> Board

                class UserPlayer{
                    ~UserPlayer(Token, Board) : base(Token, Board)
                    #GetCoordinate(Message) : Coordinate
                    #CheckErrorToPuToken(Coordinate) : Error
                    #CheckOriginErrorToMoveToken(origin) : Error
                    #CheckTargetErrorToMoveToken(origin, target) : Error
                }

                class MachinePlayer{
                    ~UserPlayer(Token, Board) : base(Token, Board)
                    #GetCoordinate(Message) : Coordinate
                }

                class PlayerConfiguration{
                    ~PlayerConfiguration()
                    ~Configure(Board) : Players
                    -Read() : int
                    - CheckErrorToEnterPlayersNumber(players) : Error
                }
                PlayerConfiguration ..> "2" Player
                PlayerConfiguration ..> "2" UserPlayer
                PlayerConfiguration ..> "2" MachinePlayer
                PlayerConfiguration ..> Board
            }

            namespace Types{
                class Coordinate{
                }
                Coordinate <.up. Models.Board
                Coordinate <.up. Models.Player
            }

            namespace Enums{
                enum Message{
                }
                Message <.up. Models.Player

                enum Token{
                }
                Token <.up. Models.Board
                Token <.up. Models.Player
                Token <.up. Models.PlayerConfiguration

                enum Error{
                }
                Error <.up. Models.Player
            }

            namespace ConsoleIOs{
                class ConsoleIO{
                }
                ConsoleIO <.up. Models.Player
                ConsoleIO <.up. Models.PlayerConfiguration

                class YesNotDialog{
                }
                YesNotDialog <.up. Models.Player
            }
        }
    }
@enduml

@startuml Design Class Types
    !theme blueprint
    title Design Class - Types

    package TicTacToe{
        package ConsoleApp{  
            namespace Types{
                class Coordinate{
                    ~{static}Dimension
                    -row : int
                    -colunm : int
                    ~Coordinate()
                    ~Coordinate(row, colunm)
                    ~GetRow() : int
                    ~GetColunm() : int
                    ~Read()
                    -CheckErrorToReadCoordinate() : Error
                    ~ReadRamdon()
                    ~ Equals(Coordinate) : boolean
                    ~GetDirection(Coordinate) : Direction
                    -InHorizontal(Coordinate) : boolean
                    -InVertical(Coordinate) : boolean
                    -InMainDiagonal() : boolean
                    -InInverseDiagonal() : boolean
                }
                Coordinate ..> ClosedInterval
                
                class ClosedInterval{
                    -min : int
                    -max : int
                    ~ClosedInterval(min, max)
                    ~IsValid(value) : boolean
                }
            }

            namespace Enums{
                enum Message{
                }
                Message <.up. Types.Coordinate

                enum Error{
                }
                Error <.up. Types.Coordinate
            }

            namespace ConsoleIOs{
                class ConsoleIO{
                }
                ConsoleIO <.up. Types.Coordinate
            }
        }
    }
@enduml

@startuml Design Class Enums
    !theme blueprint
    title Design Class - Enums

    package TicTacToe{
        package ConsoleApp{  

            namespace Enums{
                enum Message{
                    ~TicTacToe
                    ~HorizontalLine
                    ~VerticalLine
                    ~EnterThePlayersNumber
                    ~Row
                    ~Colunm
                    ~CurrentTurn
                    ~EnterCoordinateToPut
                    ~EnterOriginCoordinateToMove
                    ~EnterTargetCoordinateToMove
                    ~Error
                    ~WinnerMessage
                    ~Resume
                    ~Goodbye
                    -messages : string[]
                    +GetToString(Message) : string
                    +Write(Message)
                    +WriteLine(Message)
                    +WriteLine(Message, title)
                    ~WriteLine(Message , int value1, int value2)
                }

                enum Error{
                    ~SquareIsOutOfRange
                    ~SquareIsOccupied
                    ~SquareIsEmpty
                    ~TokenIsNotOfCurrentPlayer
                    ~SquareCannotBeSameCoordinate
                    ~ErrorToEnterPlayersNumber
                    ~Null
                    ~erros : string[]
                    ~IsNull(Error) : boolean
                    ~WriteLine(Errror)
                }

                enum Token{
                    ~X
                    ~O
                    ~Null
                    ~GetToString(Token) : string
                    ~IsNull(Token) : boolean
                }
                enum Direction{                    
                    ~Vertical
                    ~Horizontal
                    ~InverseDiagonal
                    ~MainDiagonal
                    ~Null
                }
            }

            namespace ConsoleIOs{
                class ConsoleIO{
                }
                ConsoleIO <.up. Enums.Message
                ConsoleIO <.up. Enums.Error
            }
        }
    }
@enduml