@startuml Architecture Design
    title Architecture Design

    package TicTacToe{
        package ConsoleApp{
            namespace Models #SkyBlue{}
            namespace Types #PaleGreen{}
            namespace Enums #GreenYellow{}
            namespace ConsoleIOs #OrangeRed{}
            namespace System.IO #SlateGrey{}

            Models ..> Types
            Models ..> Enums
            Models ..> ConsoleIOs

            Types ..> Enums
            Types ..> ConsoleIOs

            Enums ..> ConsoleIOs

        ConsoleIOs ..> System.IO
        }
    }
@enduml

@startuml Start Use Case Design
    title Use Case Design - Start
    allow_mixing

    actor User

    package Models{
        object ":TicTacToe" as TicTacToe{
        }
        object ":Board" as Board{        
        }
        object ":Player" as Player{        
        }        
    }    

    package Types{
        object ":Coordinate" as Coordinate{
        }
    }

    package Enums{        
        object ":Message" as Message{
        }
        object ":Token" as Token{
        }
    }

    User --> TicTacToe
        note on link
            Start()
        endnote
    TicTacToe ..> Message
        note on link
            WriteLine(title)
            WriteLine(CurrentTurn)

        endnote
    TicTacToe ..> Board
        note on link
            NewGame()
            Write()
        endnote
            Board ..> Message
                note on link
                    WriteLine(HorizontalLine)
                    Write(VerticalLine)
                    WriteLine()
                endnote
            Board ..> Coordinate
                note on link
                    GetCoordinate(i,j)
                endnote
            Board ..> Token
                note on link
                    GetToken()
                endnote
    TicTacToe ..> Player
        note on link
            NewGame()
        endnote
@enduml

@startuml Play Use Case Design
    title Play Use Case Design
    allow_mixing

    actor User
     package Models{
        object ":TicTacToe" as TicTacToe{
        }
        object ":Board" as Board{        
        }
        object ":Turn" as Turn{        
        }
        object ":Player" as Player{        
        }        
    }    

    package Types{
        object ":Coordinate" as Coordinate{
        }
        object ":Interval" as Interval{
        }
    }

    package Enums{        
        object ":Message" as Message{
        }
        object ":Token" as Token{
        }
        object ":Error" as Error{
        }
    }

    User ..> TicTacToe : Play()
        TicTacToe ..> Turn : Next()\n GetCurrent()
            Turn ..> Player : GetPlayer()
        TicTacToe ..> Player : GetToken()\nHasToken()\nPutToken()\nMoveToken()\nContinue()
        TicTacToe ..> Message : WriteLine(CurrentTurn)\nWriteLine(MessageWin)
            Player ..> Message : GetMessage(EnterCoordinateToPut)\nGetMessage(EnterOriginCoordinateToMove)\nGetMessage(EnterTargetCoordinateToMove)\nWrite(MessageResume)
            Player ..> Coordinate : Read(Message)
                Coordinate ..> Interval : IsValid(row)\nIsValid(colunm)
            Player ..> Error : GetErrorToPutToken(Coordinate)\nGetErrorOriginToMoveToken(origin)\nGetErrorTargetToMoveToken(origin,target)\nWriteLine()
            Player ..> Board : PutToken(Coordinate, Token)\nIsOccupied(Coordinate,Token)\nMoveToken(Origin,Target)\nIsEmpty(coordinate)
            Player ..> Token : GetToken()
                Board ..> Coordinate : GetRow()\nGetColunm()\nGetCoordinate(i,j)
        TicTacToe ..> Board : Write()\nIsTicTacToe(Token)
            Board ..> Token : GetToken(Coordinate(i,j))
            Coordinate ..> Error : GetError(IsOutOfRange)\nWriteLine()
@enduml

@startuml Resume Use Case Design
    allow_mixing

    title Resume Use Case Design
    
    actor User

    package ConsoleApp{
        
        package Models{
            object ":TicTacToe" as TicTacToe{
            }
            object ":Player" as Player{        
            }        
        }   

        package Enums{        
            object ":Message" as Message{
            }
        }

        package ConsoleIOs{
            object "YesNotDialog" as YesNotDialog{
            }
            object "ConsoleIO" as ConsoleIO{
            }
        }

        User ..> TicTacToe : Resume()
            TicTacToe ..> Player : Continue()
                Player ..> Message : GetMessage(Resume)
                Player ..> YesNotDialog : Read(Message)
                    YesNotDialog ..> ConsoleIO : ReadChar(Message)
    }
@enduml

@startuml TicTacToe Class Design
    title TicTacToe Class Design

    package TicTacToeConsoleApp{
        namespace TicTacToeConsoleApp.Models{
            class TicTacToe{
                ~TicTacToe()
                ~Init()
                -Start()
                -Play()
                -Resume()
            }
            TicTacToe *--> Board
            TicTacToe *--> Turn
            TicTacToe *--> Player
            TicTacToe <-up-* TicTacToeConsoleApp.Program
        }

        namespace TicTacToeConsoleApp.Enums{
            enum Message{
            }
            Message <.up. TicTacToeConsoleApp.Models.TicTacToe
        }        
    }
@enduml

@startuml Turn Class Design
    title Turn Class Design

    package TicTacToeConsoleApp{
        namespace TicTacToeConsoleApp.Models{
            class Turn{
                ~{static}MaxPlayers
                ~Turn(Players, Board)
                ~Next()
                ~GetCurrent() : Player                
            }
            Turn *--> "2" Player : exchanger
        }

        namespace TicTacToeConsoleApp.Enums{
            enum Token{
            }
            Token <.up. TicTacToeConsoleApp.Models.Turn
        }
    }
@enduml

@startuml Player Class Design
    title Player Class Design
    
    package TicTacToeConsoleApp{
        namespace TicTacToeConsoleApp.Models{
            class Player{
                -{static}MaxTokens = 3
                ~Player(Board, Token)
                ~HasToken() : boolean
                ~GetToken() : Token
                ~PutToken()
                -GetErrorToPutToken(Coordinate) : Error
                ~MoveToken()
                -GetErrorOriginToMoveToken(Coordinate) : Error
            }
            Player <-up-* TicTacToe
            Player "2" <-left- Turn
            Player *--> Board
        }

        namespace TicTacToeConsoleApp.Enums{
            enum Token{
            }
            Token <-up- TicTacToeConsoleApp.Models.Player
            
            enum Message{
            }
            Message <.up. TicTacToeConsoleApp.Models.Player
        }        

        namespace TicTacToeConsoleApp.Types{
            class Coordinate{
            }
            Coordinate <.up. TicTacToeConsoleApp.Models.Player
        }

        namespace TicTacToeConsoleApp.ConsoleIOs{
            class ConsoleIO{
            }
            ConsoleIO <.up. TicTacToeConsoleApp.Models.Player
        }
    }    
@enduml

@startuml Board Class Design
    title Board Class Design
    
    package TicTacToeConsoleApp{
        namespace TicTacToeConsoleApp.Models{
            class Board{
                ~Borad()
                ~Reset()
                ~IsOccopied(Coordinate, Token) : boolean
                ~PutToken(Coordinate, Token)
                ~MoveToken(Origin, Target)
                ~IsTicTacToe(Token) : boolean
                ~Write()
            }
            Board <-up-* TicTacToe
            Board <-left- Player
        }

        namespace TicTacToeConsoleApp.Enums{
            enum Token{
            }
            Token "0..6" <-up-o TicTacToeConsoleApp.Models.Board
        }                

        namespace TicTacToeConsoleApp.Types{
            class Coordinate{
            }
            Coordinate <.up. TicTacToeConsoleApp.Models.Board
        }
    }
@enduml

@startuml Enums Design
    title Enums Design

    package TicTacToeConsoleApp{

        namespace TicTacToeConsoleApp.Enums{
            enum Token{
                ~X,
                ~O,
                ~Null
                ~IsNull(Token) : boolean
                ~GetToString(Token) : string
            }

            enum Message{                
                ~TicTacToe,
                ~HorizontalLine,
                ~VerticalLine,
                ~Row,
                ~Colunm,
                ~CurrentTurn,
                ~EnterCoordinateToPut,
                ~EnterOriginCoordinateToMove,
                ~EnterTargetCoordinateToMove,
                ~Error,
                ~WinnerMessage,
                ~Resume,
                ~Goodbye
                ~Write(Message)
                ~WhiteLine(Message)
                ~WriteLine(Message, turn)
            }

            enum Error{
                ~SquareIsOutOfRange,
                ~SquareIsOccupied,
                ~SquareIsEmpty,
                ~TokenIsNotOfCurrentPlayer,
                ~SquareCannotBeSameCoordinate,
                ~Null
                ~IsNull(Error) : boolean
                ~WriteLine(Error)
            }
        }

        namespace TicTacToeConsoleApp.Models{
            TicTacToe ..> TicTacToeConsoleApp.Enums.Message

            Turn ..> TicTacToeConsoleApp.Enums.Token
            Board o--> "0..n" TicTacToeConsoleApp.Enums.Token
            
            Player --> "3" TicTacToeConsoleApp.Enums.Token
            Player ..> TicTacToeConsoleApp.Enums.Error
            Player ..> TicTacToeConsoleApp.Enums.Message
        }

        namespace TicTacToeConsoleApp.ConsoleIOs{
            ConsoleIOs <.up. TicTacToeConsoleApp.Enums.Message
            ConsoleIOs <.up. TicTacToeConsoleApp.Enums.Error
        }
    }
@enduml

@startuml Types Class Design
    title Types Class Design

    package TicTacToeConsoleApp{
        namespace TicTacToeConsoleApp.Types{
            class Coordinate{
                ~{static}Dimension = 3
                -row : int
                -colunm : int
                ~Coordinate()
                ~GetRow() : int
                ~GetColunm() : int
                ~Coordinate(row, colunm)
                ~Read(Message) : Coordinate
                -GetErrorToReadCoordinte(Coordinate) : Error
                -IsValid() : boolean
            }
            Coordinate ..> Interval

            class Interval{
                -min : int
                -max : int
                ~Interval(min, max)
                ~IsIncluide(value) : boolean
            }
        }

        namespace TicTacToeConsoleApp.Models{
            Board ..> TicTacToeConsoleApp.Types.Coordinate
            Player ..> TicTacToeConsoleApp.Types.Coordinate
        }

        namespace TicTacToeConsoleApp.Enums{
            enum Message{
            } 
            Message <.up. TicTacToeConsoleApp.Types.Coordinate
            
            enum Error {
            } 
            Error <.up. TicTacToeConsoleApp.Types.Coordinate
        }
    }
@enduml

